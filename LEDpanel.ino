

#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>
// #ifndef PSTR
//  #define PSTR // Make Arduino Due happy
// #endif

#define PIN 12

static const uint8_t matrixHeight = 2;


Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(32, 8,1, matrixHeight, 12,
  NEO_MATRIX_TOP     + NEO_MATRIX_LEFT +
  NEO_MATRIX_COLUMNS + NEO_MATRIX_ZIGZAG +
  NEO_TILE_TOP    + NEO_TILE_LEFT   +
  NEO_TILE_COLUMNS   + NEO_TILE_ZIGZAG);

const uint16_t colors[] = {
  matrix.Color(255, 0, 0), matrix.Color(0, 255, 0), matrix.Color(0, 0, 255) };

static const uint16_t PROGMEM Portland_Timbers_logo_small[992] PROGMEM={ // 31x32
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0840, 0x10A0, 0x2940, 0x41E0, 0x5A60, 0x6280,   // 0x0010 (16) pixels
  0x5A60, 0x49E0, 0x2960, 0x10A0, 0x0840, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0820, 0x18E2, 0x29A4, 0x5AE7, 0x73A8, 0x7BE7, 0x83C6, 0x83C5, 0x83A5, 0x83C5,   // 0x0030 (48) pixels
  0x83C6, 0x7C07, 0x73A8, 0x5AE7, 0x29A4, 0x18E2, 0x0840, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
  0x0000, 0x0000, 0x0000, 0x1920, 0x5B4C, 0x52A8, 0x5AA4, 0x7326, 0x7366, 0x4AA4, 0x2203, 0x01C2, 0x01E2, 0x01E1, 0x01E2, 0x01C2,   // 0x0050 (80) pixels
  0x2203, 0x4AA4, 0x7346, 0x7326, 0x5284, 0x52A9, 0x5B4B, 0x1900, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0060 (96) pixels
  0x0000, 0x1060, 0x52E8, 0xE77D, 0xEF7B, 0xD694, 0xB54E, 0x8C49, 0x6367, 0x3AC5, 0x1244, 0x01E2, 0x01C1, 0x01E2, 0x1244, 0x3AA5,   // 0x0070 (112) pixels
  0x6367, 0x944A, 0xBD6F, 0xD695, 0xEF9C, 0xDF5C, 0x4AA6, 0x1080, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0080 (128) pixels
  0x51C0, 0x8C91, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFDF, 0xF79E, 0xEF5D, 0xE73C, 0xE71C, 0xE73C, 0xEF5D, 0xF79E, 0xFFDF,   // 0x0090 (144) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x7C2F, 0x51E0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x18C2, 0x7B02,   // 0x00A0 (160) pixels
  0xAD95, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00B0 (176) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x9D53, 0x7B22, 0x18C2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0060, 0x62A0, 0x7B42, 0xB5D7,   // 0x00C0 (192) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00D0 (208) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xADB6, 0x7B62, 0x62A0, 0x0060, 0x0000, 0x0000, 0x0000, 0x0000, 0x1163, 0x8BE5, 0x4A00, 0xB5B6, 0xFFFF,   // 0x00E0 (224) pixels
  0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x00F0 (240) pixels
  0xFFFF, 0xFFFF, 0xA575, 0x5200, 0x8BE5, 0x1163, 0x0000, 0x0000, 0x0000, 0x00A0, 0x8341, 0x7386, 0x0100, 0x9513, 0xFFFF, 0xFFFF,   // 0x0100 (256) pixels
  0xFFFF, 0xFFFF, 0xF7FE, 0xEF9C, 0xD75A, 0xCEB9, 0xC658, 0xC638, 0xC658, 0xCEB9, 0xD75A, 0xEF9C, 0xF7FE, 0xFFFF, 0xFFFF, 0xFFFF,   // 0x0110 (272) pixels
  0xFFFF, 0x8CD1, 0x0120, 0x7386, 0x8321, 0x00A0, 0x0000, 0x0000, 0x21A4, 0x93E3, 0x4220, 0x0181, 0x638D, 0xFFFF, 0xFFDF, 0xD6BA,   // 0x0120 (288) pixels
  0x9D14, 0x73AD, 0x52A8, 0x0921, 0x52EA, 0xB5B6, 0xB5D6, 0xB5B6, 0x530B, 0x0921, 0x52C9, 0x6BCE, 0xA534, 0xD6DA, 0xFFDF, 0xFFDF,   // 0x0130 (304) pixels
  0x532B, 0x0980, 0x4220, 0x93E3, 0x21A4, 0x0000, 0x0040, 0x7301, 0x8384, 0x01E3, 0x0A03, 0x1224, 0x9593, 0x5BEB, 0x0100, 0x2140,   // 0x0140 (320) pixels
  0x8BA3, 0x42E4, 0x0160, 0x740E, 0xFFFF, 0xFFFF, 0xFFFF, 0x7C2F, 0x0160, 0x4B05, 0x8BA2, 0x2120, 0x0120, 0x642C, 0x9572, 0x01E2,   // 0x0150 (336) pixels
  0x0A03, 0x01E3, 0x8384, 0x7301, 0x0060, 0x00C2, 0x8BA3, 0x6AC1, 0x01E3, 0x0A03, 0x09E3, 0x0921, 0x0941, 0x3264, 0x7C26, 0x72E0,   // 0x0160 (352) pixels
  0x19A0, 0x01A0, 0x532B, 0xF7BE, 0xFFFF, 0xFFDF, 0x5B4C, 0x0180, 0x19A0, 0x7B00, 0x7C06, 0x2223, 0x0941, 0x0921, 0x0A03, 0x0A03,   // 0x0170 (368) pixels
  0x01E3, 0x6AC1, 0x8BA3, 0x00C2, 0x1961, 0x9BC2, 0x1A64, 0x0203, 0x0A03, 0x0A24, 0x11C1, 0x5220, 0x9405, 0x4306, 0x01E3, 0x19A0,   // 0x0180 (384) pixels
  0x7AC0, 0x6328, 0xF79E, 0xFFFF, 0xF7BE, 0x6349, 0x7AE0, 0x21A0, 0x01C3, 0x5346, 0x93E4, 0x4220, 0x11C2, 0x0A24, 0x0A03, 0x0203,   // 0x0190 (400) pixels
  0x1A64, 0x9BC2, 0x1961, 0x3223, 0x9BC2, 0x09C2, 0x0A04, 0x0A03, 0x01E3, 0x2AA5, 0x8C06, 0x6AC0, 0x19A0, 0x01E3, 0x5366, 0xAC83,   // 0x01A0 (416) pixels
  0x5B07, 0xEF7D, 0xFFFF, 0xEF9E, 0x5AE8, 0xAC83, 0x63A7, 0x01C3, 0x19A0, 0x72E0, 0x8406, 0x2264, 0x01E3, 0x0A03, 0x0A04, 0x09C2,   // 0x01B0 (432) pixels
  0x9BC2, 0x3223, 0x4A82, 0x93A2, 0x01E3, 0x0A24, 0x11C1, 0x5240, 0x93E5, 0x4306, 0x01E3, 0x1980, 0x8320, 0xB484, 0x5344, 0x2266,   // 0x01C0 (448) pixels
  0xEF7D, 0xFFFF, 0xEF9E, 0x3287, 0x4B04, 0xAC85, 0x8B40, 0x2180, 0x01E3, 0x4B26, 0x93E5, 0x4A40, 0x11C1, 0x0A24, 0x01E3, 0x93A2,   // 0x01D0 (464) pixels
  0x4A82, 0x52A3, 0x93A2, 0x01E3, 0x01E3, 0x32A5, 0x8C06, 0x62A0, 0x19A0, 0x01E3, 0x5B67, 0xB484, 0x8300, 0x1980, 0x2AA7, 0xEF7D,   // 0x01E0 (480) pixels
  0xFFFF, 0xEF9E, 0x32A8, 0x1180, 0x72C0, 0xB483, 0x63A7, 0x01E3, 0x19A0, 0x6AC0, 0x8C06, 0x2A85, 0x01E3, 0x01E3, 0x93A2, 0x52A3,   // 0x01F0 (496) pixels
  0x4263, 0x93A2, 0x1181, 0x5A60, 0x9405, 0x42E6, 0x01E3, 0x2180, 0x8320, 0xB485, 0x5346, 0x01C3, 0x1980, 0x3A86, 0xEF9E, 0xFFFF,   // 0x0200 (512) pixels
  0xF79E, 0x42A7, 0x1980, 0x01E3, 0x4306, 0xAC85, 0x9360, 0x2180, 0x01E3, 0x4306, 0x93E5, 0x5240, 0x11A1, 0x93A2, 0x4263, 0x31E1,   // 0x0210 (528) pixels
  0x93C2, 0x3AC5, 0x8C05, 0x6280, 0x19A1, 0x01E3, 0x5B67, 0xB4A4, 0x7AE0, 0x1980, 0x01E3, 0x4B04, 0x5329, 0xEF9D, 0xFFFF, 0xF79E,   // 0x0220 (544) pixels
  0x5329, 0x5324, 0x01E3, 0x19A0, 0x72C0, 0xB483, 0x63A7, 0x01E3, 0x19A0, 0x62A0, 0x8C05, 0x32A5, 0x9BC2, 0x31E1, 0x0122, 0x9BE3,   // 0x0230 (560) pixels
  0x9C03, 0x3AC6, 0x01E3, 0x1980, 0x8B40, 0xB4A5, 0x4B46, 0x01C3, 0x19A0, 0x72E0, 0x7BE4, 0x4AE9, 0xF79E, 0xFFFF, 0xF79E, 0x4AE9,   // 0x0240 (576) pixels
  0x73E4, 0x8321, 0x19A0, 0x01E3, 0x4306, 0xAC85, 0x9360, 0x2180, 0x01E3, 0x3AC6, 0x9C03, 0x9BC3, 0x0122, 0x00C1, 0x8B81, 0x8320,   // 0x0250 (592) pixels
  0x1181, 0x01E3, 0x5B87, 0xB484, 0x7AE0, 0x19A0, 0x01E3, 0x4B46, 0x93E4, 0x39C0, 0x42C8, 0xF7BE, 0xFFFF, 0xF7BE, 0x4AE9, 0x2180,   // 0x0260 (608) pixels
  0x93C3, 0x5B87, 0x01E3, 0x19A0, 0x72A0, 0xB483, 0x6BC7, 0x01E3, 0x1181, 0x8340, 0x8B81, 0x00A1, 0x0020, 0x42C6, 0x93A2, 0x2160,   // 0x0270 (624) pixels
  0x8B40, 0xAC85, 0x4B26, 0x01C3, 0x19A0, 0x72E0, 0x8406, 0x1A44, 0x01C0, 0x4AE9, 0xF7BE, 0xFFFF, 0xF7BF, 0x532A, 0x01C0, 0x0203,   // 0x0280 (640) pixels
  0x7407, 0x8341, 0x19A0, 0x01E3, 0x4306, 0xAC85, 0x9380, 0x2160, 0x93A1, 0x42C6, 0x0020, 0x0000, 0x1120, 0x93A2, 0x73E8, 0xB484,   // 0x0290 (656) pixels
  0x72C0, 0x19A0, 0x01E4, 0x5346, 0x93E4, 0x4200, 0x09C2, 0x01C0, 0x532A, 0xF7BF, 0xFFFF, 0xFFDF, 0x5B4B, 0x01C0, 0x0203, 0x21A0,   // 0x02A0 (672) pixels
  0x93A3, 0x5B87, 0x01E3, 0x19A0, 0x6AA0, 0xB483, 0x7C28, 0x93A1, 0x1120, 0x0000, 0x0000, 0x0040, 0x4AE6, 0xB483, 0x62C1, 0x01C3,   // 0x02B0 (688) pixels
  0x19A0, 0x72E0, 0x8406, 0x1A44, 0x01E2, 0x0A03, 0x01C0, 0x5B4B, 0xFFBF, 0xFFFF, 0xFFDF, 0x638C, 0x01A0, 0x0A03, 0x01E3, 0x0203,   // 0x02C0 (704) pixels
  0x6C07, 0x8341, 0x21A0, 0x01E4, 0x5AA1, 0xB483, 0x4AE6, 0x0040, 0x0000, 0x0000, 0x0000, 0x08E0, 0x9360, 0x7323, 0x01A3, 0x4B46,   // 0x02D0 (720) pixels
  0x93E4, 0x4200, 0x09C2, 0x0A23, 0x0A03, 0x01A0, 0x638C, 0xFFDF, 0xFFFF, 0xFFDF, 0x63AD, 0x01A0, 0x0A03, 0x0A23, 0x0203, 0x21A0,   // 0x02E0 (736) pixels
  0x8BA3, 0x5B87, 0x01A3, 0x7344, 0x9360, 0x0900, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x21A4, 0x83E6, 0x9360, 0x93C3, 0x1A44,   // 0x02F0 (752) pixels
  0x0203, 0x0A03, 0x0A03, 0x0A03, 0x01A0, 0x6BCD, 0xFFFF, 0xFFFF, 0xFFFF, 0x73EE, 0x01A0, 0x0A03, 0x0A03, 0x0A03, 0x0203, 0x01E4,   // 0x0300 (768) pixels
  0x8383, 0x9BA1, 0x83E6, 0x2184, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0060, 0x4200, 0xA423, 0x7B01, 0x09A2, 0x0203,   // 0x0310 (784) pixels
  0x0A03, 0x0A03, 0x0A03, 0x01A0, 0x740E, 0xFFFF, 0xFFFF, 0xFFFF, 0x7C2F, 0x0180, 0x0A03, 0x0A03, 0x0A03, 0x0203, 0x01C3, 0x7301,   // 0x0320 (800) pixels
  0xA402, 0x4200, 0x0060, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0040, 0x29E5, 0x7407, 0x8382, 0x31C0, 0x19A0,   // 0x0330 (816) pixels
  0x09E3, 0x0A04, 0x0160, 0x8470, 0xFFFF, 0xFFFF, 0xFFFF, 0x8491, 0x0160, 0x0A04, 0x09E3, 0x19A0, 0x31C0, 0x8382, 0x7407, 0x31C5,   // 0x0340 (832) pixels
  0x0040, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0040, 0x2140, 0x8342, 0x7C27, 0x5367, 0x1244,   // 0x0350 (848) pixels
  0x01C3, 0x0140, 0x8CB1, 0xFFFF, 0xFFFF, 0xFFFF, 0x94F2, 0x0120, 0x01C3, 0x1244, 0x5346, 0x7C27, 0x8342, 0x2140, 0x0020, 0x0000,   // 0x0360 (864) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0881, 0x4225, 0x7387, 0x8406, 0x8B83,   // 0x0370 (880) pixels
  0x5200, 0x9D13, 0xFFFF, 0xFFFF, 0xFFFF, 0xA534, 0x5200, 0x8B83, 0x8406, 0x7388, 0x4225, 0x0881, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0380 (896) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x0020, 0x10A0, 0x39A0, 0x7B21, 0x7B62,   // 0x0390 (912) pixels
  0xADB6, 0xFFFF, 0xFFFF, 0xFFFF, 0xB5B6, 0x7B62, 0x7B21, 0x39A0, 0x10A0, 0x0020, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03A0 (928) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x31A2, 0x8CF1,   // 0x03B0 (944) pixels
  0xDF9C, 0xEFBD, 0xE79C, 0x8D11, 0x2983, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03C0 (960) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0040, 0x00C0, 0x21A5,   // 0x03D0 (976) pixels
  0x4289, 0x21C5, 0x08C1, 0x0040, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x03E0 (992) pixels
};

static const uint16_t Portland_Timbers_logo_xsmall[64] PROGMEM={ // 8x8
  0x0000, 0x632B, 0x7BEE, 0x634B, 0x634B, 0x7BEE, 0x632B, 0x0000, 0x0000, 0xCE78, 0xFFFE, 0xEF9C, 0xEF9C, 0xFFFE, 0xCE58, 0x0000,   // 0x0010 (16) pixels
  0x4200, 0x950F, 0xAD70, 0xBDF6, 0xBDF6, 0xAD70, 0x8D0E, 0x4200, 0x5AA2, 0x3203, 0x39E2, 0xB5B5, 0xB5B5, 0x3A03, 0x3203, 0x5AA3,   // 0x0020 (32) pixels
  0x62E3, 0x6303, 0x4AC1, 0xB595, 0xB595, 0x4AC2, 0x6303, 0x62E3, 0x5A81, 0x6B24, 0x2A00, 0xB595, 0xB5B5, 0x29C0, 0x6B44, 0x5A62,   // 0x0030 (48) pixels
  0x0860, 0x5286, 0x1980, 0xBDF7, 0xBE17, 0x1980, 0x5286, 0x1060, 0x0000, 0x0000, 0x1960, 0xA554, 0xA554, 0x1160, 0x0020, 0x0000,   // 0x0040 (64) pixels
};

static const uint16_t godzilla_seattle_small[1152] PROGMEM={ //32x36
  0xF800, 0xF800, 0xFA06, 0xFA26, 0xF881, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0010 (16) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0020 (32) pixels
  0xF800, 0xF34A, 0xDD6F, 0xE611, 0xDB8B, 0xF903, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0030 (48) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0040 (64) pixels
  0xFA26, 0x9AE8, 0x954D, 0xD6D2, 0x4A05, 0xF329, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF820, 0xF000, 0xA000,   // 0x0050 (80) pixels
  0x5000, 0x9000, 0xE800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0060 (96) pixels
  0xFAA7, 0x8B08, 0x9D8E, 0xC691, 0x3AA5, 0xEB6A, 0xF800, 0xF800, 0xF8A2, 0xF9A5, 0xF800, 0xF840, 0xF800, 0xE000, 0x6000, 0x0040,   // 0x0070 (112) pixels
  0x0000, 0x4ACA, 0x71E7, 0xE000, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0080 (128) pixels
  0xF903, 0xE48D, 0x9D2E, 0x9D4D, 0xCCCE, 0xFA87, 0xF800, 0xF800, 0xF800, 0xF922, 0xF860, 0xF860, 0xE880, 0x5800, 0x0000, 0x0000,   // 0x0090 (144) pixels
  0x0000, 0x630B, 0x5B2C, 0x9800, 0xF8C1, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x00A0 (160) pixels
  0xF800, 0xF9E5, 0xEB6B, 0xE38B, 0xFAA8, 0xF800, 0xF800, 0xF389, 0xEC2F, 0xF800, 0xF800, 0xF020, 0x7020, 0x00A0, 0x0000, 0x20E2,   // 0x00B0 (176) pixels
  0x52A9, 0x5AC9, 0x18E3, 0x0000, 0xD800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x00C0 (192) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF40E, 0xF676, 0xFFBD, 0xEF1B, 0xF040, 0xDAA8, 0x8000, 0x0060, 0x00A0, 0x0020, 0x0840,   // 0x00D0 (208) pixels
  0x5B0A, 0x630A, 0x738C, 0x842E, 0xD964, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x00E0 (224) pixels
  0xF800, 0xF8C0, 0xF860, 0xF800, 0xF800, 0xECB1, 0xF77D, 0xEF3B, 0xE46E, 0xE40E, 0x7BAC, 0x0000, 0x0060, 0x0060, 0x10A0, 0x0040,   // 0x00F0 (240) pixels
  0x0082, 0x6B8C, 0x5B28, 0x73CB, 0xCD12, 0xFA28, 0xF800, 0xF800, 0xF000, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0100 (256) pixels
  0xF940, 0xF960, 0xF800, 0xEA48, 0xDC2D, 0xDBAA, 0xE1A0, 0xD48F, 0xCCD1, 0x8C2F, 0x0000, 0x0040, 0x08A0, 0x08A0, 0x1060, 0x00C0,   // 0x0110 (272) pixels
  0x6000, 0x9841, 0xAC4E, 0x7C2B, 0x7C6B, 0xC50F, 0xF267, 0xF800, 0xE800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0120 (288) pixels
  0xF8C0, 0xF880, 0xF800, 0xF287, 0xE718, 0xE6F6, 0xBCF0, 0xD636, 0x8C91, 0x0000, 0x0040, 0x0000, 0x0020, 0x0020, 0x0080, 0x1840,   // 0x0130 (304) pixels
  0xD820, 0xF800, 0xF902, 0xCC0D, 0xB5B1, 0xBE12, 0xCD91, 0xD554, 0xD451, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800,   // 0x0140 (320) pixels
  0xF820, 0xF800, 0xF800, 0xEC6F, 0xE739, 0xFFDA, 0xBDF4, 0x0000, 0x0000, 0x0900, 0x0080, 0x0020, 0x0060, 0x0020, 0x0040, 0xA000,   // 0x0150 (336) pixels
  0xF800, 0xF800, 0xF800, 0xF964, 0xCCCF, 0xBDF4, 0xC637, 0xCE99, 0xDEFA, 0xE34C, 0xF800, 0xF800, 0xF000, 0xF800, 0xF800, 0xF800,   // 0x0160 (352) pixels
  0xF820, 0xF800, 0xEA27, 0xDDF5, 0xCE55, 0x9CD0, 0x0000, 0x0000, 0x08C0, 0x00A0, 0x0820, 0x0000, 0x0860, 0x0860, 0x0000, 0xB800,   // 0x0170 (368) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xE289, 0x9CD2, 0x94B2, 0x7BAC, 0x8C70, 0xACF2, 0xCB0A, 0xE2C2, 0xD800, 0xE800, 0xF800, 0xE800,   // 0x0180 (384) pixels
  0xF840, 0xF800, 0xF800, 0xECD0, 0xAD53, 0x0000, 0x0020, 0x08C0, 0x0900, 0x08C0, 0x0000, 0x0020, 0x0020, 0x0040, 0x0000, 0x7000,   // 0x0190 (400) pixels
  0xF000, 0xF820, 0xF800, 0xF800, 0xF800, 0xD2EB, 0x9CF1, 0xA533, 0x8C4F, 0x8C6E, 0xBDEF, 0xEF53, 0xDDED, 0xD0C0, 0xF800, 0xF000,   // 0x01A0 (416) pixels
  0xF820, 0xF860, 0xF800, 0xCCF1, 0x4ACA, 0x0000, 0x08C0, 0x0900, 0x00E0, 0x0840, 0x1040, 0x0020, 0x0060, 0x10E0, 0x0000, 0x0000,   // 0x01B0 (432) pixels
  0xB000, 0xF800, 0xEC50, 0xF3CE, 0xF8A1, 0xD000, 0x72A6, 0x1000, 0x948C, 0xB5AD, 0xCE2C, 0xE6F0, 0xF771, 0xDDC4, 0xF0C0, 0xF800,   // 0x01C0 (448) pixels
  0xF800, 0xF8C2, 0xDC2F, 0x7288, 0x0000, 0x0840, 0x08C0, 0x0140, 0x0960, 0x00A0, 0x0060, 0x0020, 0x0000, 0x0000, 0x9CD2, 0x6B4C,   // 0x01D0 (464) pixels
  0x2000, 0x8800, 0x9CD1, 0xEF5B, 0xEC30, 0xDAC9, 0xB4D2, 0x7B6B, 0xCE31, 0xDEB0, 0xD68F, 0xDECC, 0xEF2A, 0xFFE4, 0xF680, 0xEA80,   // 0x01E0 (480) pixels
  0xF800, 0xF800, 0xEE37, 0x740E, 0x0140, 0x0880, 0x10C0, 0x0900, 0x0940, 0x0940, 0x0940, 0x00A0, 0x0040, 0x0000, 0xD6BA, 0xAD74,   // 0x01F0 (496) pixels
  0x0000, 0x0000, 0x1964, 0x94D2, 0xE3AE, 0xEBCE, 0xC534, 0xA3EE, 0xE348, 0xF60E, 0xF710, 0xF74F, 0xF76E, 0xFF89, 0xFFE4, 0xF741,   // 0x0200 (512) pixels
  0xF820, 0xF8C0, 0xCD74, 0x3A86, 0x11E0, 0x1180, 0x1960, 0x10C0, 0x08E0, 0x00A0, 0x0880, 0x0080, 0x0000, 0x0000, 0xA554, 0xA554,   // 0x0210 (528) pixels
  0x0100, 0x0000, 0x41A6, 0xBD54, 0xEBEF, 0xF4F3, 0xC513, 0xBBEE, 0xF800, 0xF800, 0xEE0A, 0xFFCA, 0xFFAA, 0xFFA8, 0xFFC5, 0xFFE3,   // 0x0220 (544) pixels
  0xF840, 0xF144, 0x9268, 0x00E0, 0x2160, 0x1120, 0x1960, 0x1900, 0x10C0, 0x0800, 0x0000, 0x0000, 0x0000, 0x7BCF, 0xBDB6, 0x9943,   // 0x0230 (560) pixels
  0xB000, 0xC000, 0xE061, 0xF9C7, 0xF800, 0xF595, 0xC4D2, 0xCB4B, 0xF800, 0xF800, 0xF0A0, 0xEEA0, 0xFFC1, 0xFFE0, 0xFFC0, 0xFFC0,   // 0x0240 (576) pixels
  0xF800, 0xF800, 0x9800, 0x0000, 0x0880, 0x0800, 0x0000, 0x0000, 0x0040, 0x0020, 0x0020, 0x0920, 0x0160, 0x71A5, 0xF28A, 0xF820,   // 0x0250 (592) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0xF576, 0xDCD2, 0xE2A9, 0xF800, 0xF800, 0xF800, 0xE940, 0xE542, 0xFFE1, 0xFFE0, 0xFFC0,   // 0x0260 (608) pixels
  0xF880, 0xD800, 0x3080, 0x0140, 0x1160, 0x0940, 0x00C0, 0x0000, 0x0040, 0x00A0, 0x10E0, 0x1120, 0x00C0, 0xA000, 0xF800, 0xF800,   // 0x0270 (624) pixels
  0xF820, 0xF800, 0xF800, 0xF800, 0xF800, 0xFDD6, 0xDCD1, 0xEA89, 0xF800, 0xF800, 0xF800, 0xF800, 0xF000, 0xED03, 0xF780, 0xFFE0,   // 0x0280 (640) pixels
  0xF820, 0x9800, 0x0140, 0x1160, 0x2200, 0x11E0, 0x0140, 0x01A0, 0x1120, 0x10A0, 0x1100, 0x0840, 0x0000, 0x9000, 0xF800, 0xF800,   // 0x0290 (656) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF840, 0xF5D6, 0xEDD6, 0xF30B, 0xF800, 0xF800, 0xF800, 0xF000, 0xF000, 0xF000, 0xEBC0, 0xF7A0,   // 0x02A0 (672) pixels
  0xF000, 0x5060, 0x0180, 0x21C0, 0x19E0, 0x21A2, 0x09A0, 0x2B61, 0x3B62, 0x0860, 0x08A0, 0x0880, 0x00A0, 0x1820, 0xE000, 0xF800,   // 0x02B0 (688) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF9A6, 0xF5D7, 0xEDB6, 0xF38D, 0xF800, 0xF800, 0xF800, 0xF000, 0xF000, 0xE800, 0xF000, 0xEB60,   // 0x02C0 (704) pixels
  0xF020, 0x58C0, 0x01A0, 0x21C0, 0x0100, 0x09A1, 0x2AA0, 0x32C0, 0x19C0, 0x0020, 0x0020, 0x0880, 0x0860, 0x0020, 0xA000, 0xF800,   // 0x02D0 (720) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xF1A6, 0xD4B1, 0xC471, 0xEAEA, 0xF800, 0xF800, 0xF800, 0xF000, 0xE800, 0xE800, 0xF000, 0xF800,   // 0x02E0 (736) pixels
  0xF860, 0x80C0, 0x01A0, 0x0160, 0x11A0, 0x4340, 0x2260, 0x1060, 0x0880, 0x08A0, 0x0000, 0x0860, 0x0020, 0x0020, 0x5800, 0xF000,   // 0x02F0 (752) pixels
  0xF800, 0xF820, 0xF800, 0xF800, 0xF248, 0xCC30, 0xA3EE, 0xE30B, 0xF800, 0xF800, 0xF800, 0xF000, 0xF000, 0xF000, 0xF000, 0xF800,   // 0x0300 (768) pixels
  0xF8A0, 0x88E0, 0x2240, 0x61C0, 0xB300, 0x9AA1, 0x58C0, 0x00C0, 0x0000, 0x0020, 0x0000, 0x0000, 0x0040, 0x0000, 0x0800, 0xE800,   // 0x0310 (784) pixels
  0xF800, 0xF800, 0xF800, 0xF800, 0xE268, 0xCBAD, 0x8B4C, 0xDAEA, 0xF800, 0xF800, 0xF800, 0xF000, 0xF000, 0xE000, 0xE800, 0xF800,   // 0x0320 (800) pixels
  0xF800, 0xBA40, 0xA3C2, 0xF54D, 0xEDB1, 0xC349, 0xB3AB, 0x0000, 0x0000, 0x0000, 0x0020, 0x0880, 0x0000, 0x4820, 0x5800, 0xE060,   // 0x0330 (816) pixels
  0xFA66, 0xFBCC, 0xFA03, 0xFA44, 0xE2EA, 0xCBAD, 0x7B2B, 0xDB6C, 0xF800, 0xFA82, 0xF9C0, 0xFAA1, 0xF120, 0xE800, 0xF000, 0xF800,   // 0x0340 (832) pixels
  0xF344, 0xEC6B, 0xEDCE, 0xFE92, 0xF716, 0x9260, 0xED10, 0xAB2A, 0xA000, 0x6000, 0x0020, 0x0000, 0x6902, 0xC8E1, 0x6000, 0xA102,   // 0x0350 (848) pixels
  0xFCAD, 0xFE76, 0xF962, 0xFC2C, 0xE32B, 0xD3CE, 0x7B8D, 0xD36C, 0xFAC0, 0xFB25, 0xFBE0, 0xFDC2, 0xFAC1, 0xE800, 0xF800, 0xF800,   // 0x0360 (864) pixels
  0xFEF3, 0xFE0F, 0xFEB4, 0xFDAF, 0xFDCF, 0xCB49, 0xF44C, 0xE38C, 0xF800, 0x5800, 0x0020, 0x0000, 0x9B0A, 0xCB8B, 0x0000, 0xBAC8,   // 0x0370 (880) pixels
  0xFB48, 0xFE12, 0xF800, 0xFB87, 0xE34B, 0xCBEE, 0x83CE, 0xD3AE, 0xFAA0, 0xF9E1, 0xFC00, 0xFD40, 0xFA60, 0xE820, 0xE800, 0xF940,   // 0x0380 (896) pixels
  0xFE4F, 0xFDAC, 0xFF98, 0xFF36, 0xFDD0, 0xFB8A, 0xDC6C, 0x7903, 0xE881, 0x5800, 0x0000, 0x6000, 0xBA26, 0xC46E, 0x0000, 0xEE10,   // 0x0390 (912) pixels
  0xFC8B, 0xFC0A, 0xF983, 0xFC29, 0xDB8D, 0xCA89, 0x5207, 0xC3CE, 0xF9E0, 0xFBC2, 0xF9C0, 0xFB40, 0xFD00, 0xF3E0, 0xE000, 0xFB60,   // 0x03A0 (928) pixels
  0xF427, 0xFD2B, 0xFF37, 0xFFDB, 0xFD8F, 0xFC2C, 0xF5AF, 0x8A06, 0xEB29, 0xAA67, 0x2184, 0xAA65, 0xF40C, 0xF48C, 0xBB08, 0xFFB5,   // 0x03B0 (944) pixels
  0xFFF5, 0xFC4A, 0xFAE6, 0xFD4C, 0xD34C, 0xC1E7, 0x59C6, 0xBB4C, 0xFB80, 0xFCA2, 0xF800, 0xFE00, 0xFFE0, 0xFDA0, 0xE000, 0xF2C0,   // 0x03C0 (960) pixels
  0x48A0, 0xDBAA, 0xFAE8, 0xF44D, 0xFDF2, 0xFCEF, 0xFCA9, 0xEC0C, 0xF247, 0xF36C, 0x9309, 0x8A87, 0xFD72, 0xF2C6, 0xF326, 0xFE91,   // 0x03D0 (976) pixels
  0xFFF7, 0xFCCD, 0xFC4A, 0xFD0C, 0xDD11, 0xCB4D, 0x82CB, 0xC450, 0xFC82, 0xFC01, 0xFB80, 0xFE60, 0xFFE0, 0xFE00, 0xD800, 0xF300,   // 0x03E0 (992) pixels
  0x0000, 0x5943, 0xE1C1, 0x7226, 0xE42E, 0xD38A, 0xE4AD, 0xE38C, 0xF2C9, 0xF2EA, 0xAB0A, 0xAAE9, 0xF388, 0xEA05, 0xE266, 0xF46B,   // 0x03F0 (1008) pixels
  0xE715, 0x93EB, 0xD226, 0xFCED, 0xDDD5, 0xD658, 0xBDB5, 0xCDB5, 0xED2B, 0xFA80, 0xFE40, 0xFFE0, 0xE700, 0xC4C0, 0x6800, 0x80A0,   // 0x0400 (1024) pixels
  0x0000, 0x80E0, 0xC9C1, 0x69E3, 0x7226, 0x0000, 0xDE97, 0xC44E, 0xA2C8, 0xDAE9, 0x3923, 0x8B2A, 0xF677, 0xFBAA, 0xDAC8, 0x9C6C,   // 0x0410 (1040) pixels
  0x6B6A, 0x0000, 0x4A42, 0xFF52, 0xED31, 0x9208, 0x7268, 0xB451, 0xE5A6, 0xDE20, 0x7B60, 0xC560, 0x8B60, 0x0000, 0x0040, 0x0000,   // 0x0420 (1056) pixels
  0x0000, 0x9961, 0x8942, 0x9161, 0xDA87, 0xA287, 0x6AC8, 0xEAC7, 0xB2A8, 0xA2E9, 0x1923, 0x79E7, 0xEB4B, 0x9AC8, 0xBA67, 0xDB8A,   // 0x0430 (1072) pixels
  0x62A8, 0x0000, 0x2122, 0xAD2C, 0xB509, 0x0000, 0x0000, 0x1000, 0x4A60, 0xA500, 0x0000, 0x2800, 0x3820, 0x0000, 0x0000, 0x0000,   // 0x0440 (1088) pixels
  0x0000, 0x3000, 0x0000, 0x0000, 0x7160, 0x71C4, 0x0000, 0x6184, 0xA267, 0x9288, 0x00A1, 0x8227, 0x8A26, 0x0000, 0x0082, 0x9A47,   // 0x0450 (1104) pixels
  0x59C5, 0x0000, 0x0000, 0x0000, 0x6B64, 0x0000, 0x0000, 0x0000, 0x0000, 0x9441, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0460 (1120) pixels
  0x738D, 0x738E, 0x6B6D, 0x632C, 0x5AEB, 0x5266, 0x2800, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0470 (1136) pixels
  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x2941, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0480 (1152) pixels
};
static const uint16_t spaceneedle_small[48] PROGMEM={ // 6x8
    0x0000, 0x0000, 0xFFFF, 0x4208, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x4208, 0x4208, 0xFFFF, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x8410,   // 0x0010 (16) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x8410, 0x0000, 0x0000, 0x0000, 0x0000, 0xFFFF, 0x8410, 0x0000, 0x0000, 0x0000, 0x4208,   // 0x0020 (32) pixels
    0xFFFF, 0x8410, 0x4208, 0x0000, 0x4208, 0xFFFF, 0xFFFF, 0xFFFF, 0x8410, 0x8410, 0xFFFF, 0xFFFF, 0x4208, 0x4208, 0xFFFF, 0xFFFF,   // 0x0030 (48) pixels
};
static const uint16_t godzilla_small[56] PROGMEM={ // 7x8
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9CD3, 0xC699, 0x2247, 0xB805, 0x11E6, 0x0000, 0x4208,   // 0x0010 (16) pixels
    0xF7BE, 0x640F, 0x11E6, 0x11E6, 0x11E6, 0x31A6, 0xF79E, 0x8D13, 0x1A27, 0x11E6, 0x21C6, 0x0000, 0x73AE, 0xEF7D, 0x32EA, 0x11E6,   // 0x0020 (32) pixels
    0x11E6, 0x1185, 0x0000, 0x1082, 0x4A69, 0x1206, 0x11E6, 0x11E6, 0x29A6, 0x0000, 0x31E7, 0x11E6, 0x11E6, 0x11E6, 0x11E6, 0x2144,   // 0x0030 (48) pixels
    0x0000, 0x11E6, 0x08E3, 0x11E6, 0x0000, 0x11E6, 0x0000, 0x0000
};
static const uint16_t spaceneedle_fire1[48] PROGMEM={ // 6x8
    0x0000, 0xFF65, 0xFFFF, 0x738E, 0x738E, 0x738E, 0x0000, 0xFFFF, 0x4208, 0x738E, 0x738E, 0x738E, 0x0000, 0x0000, 0xF803, 0x738E,   // 0x0010 (16) pixels
    0x0000, 0xFF65, 0x0000, 0xF803, 0xF803, 0x8410, 0x738E, 0x738E, 0x0000, 0xF803, 0xF803, 0x8410, 0x0000, 0xF803, 0xF803, 0xF803,   // 0x0020 (32) pixels
    0xF803, 0xFA40, 0xF803, 0xFF65, 0xFA40, 0xF803, 0xFF65, 0xF803, 0xF803, 0xFF65, 0xF803, 0xF803, 0xFF65, 0xF803, 0xF803, 0xFF65,   // 0x0030 (48) pixels
};
static const uint16_t spaceneedle_fire2[48] PROGMEM={ // 6x8
    0x0000, 0x0000, 0xFFFF, 0xA514, 0x3186, 0xA514, 0x0000, 0xFFFF, 0x4208, 0xA514, 0xA514, 0x3186, 0x0000, 0x0000, 0x3186, 0xA514,   // 0x0010 (16) pixels
    0xF006, 0xA514, 0x0000, 0xA514, 0xA514, 0x3186, 0xF006, 0xA514, 0x0000, 0xF3A7, 0xA514, 0xF006, 0xF006, 0xF006, 0x0000, 0xF3A7,   // 0x0020 (32) pixels
    0xF006, 0xF006, 0xF006, 0xF006, 0xF006, 0xF006, 0xF3A7, 0xF6A2, 0xF3A7, 0xF006, 0xF006, 0xF3A7, 0xF3A7, 0xF6A2, 0xF6A2, 0xF006,   // 0x0030 (48) pixels
};
static const uint16_t spaceneedle_fire3[48] PROGMEM={ // 6x8
    0x0000, 0x0000, 0xFFFF, 0x4208, 0x4208, 0xC618, 0x4208, 0x4208, 0x4208, 0xC618, 0xC618, 0x0000, 0x0000, 0xC618, 0x4208, 0x4208,   // 0x0010 (16) pixels
    0xFE20, 0xC618, 0x0000, 0x4208, 0xC618, 0xF800, 0x4208, 0xFE20, 0x0000, 0x0000, 0xF800, 0xF800, 0x0000, 0x0000, 0xF800, 0xFBA9,   // 0x0020 (32) pixels
    0xF800, 0xF800, 0xFB27, 0xFB27, 0x4208, 0xFBA9, 0xFE20, 0xF800, 0xFE20, 0xF800, 0xF800, 0xF800, 0xFE20, 0xFE20, 0xFE20, 0xF800,   // 0x0030 (48) pixels
};


static const uint16_t godzilla_med[320] PROGMEM={
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x02E0, 0x03E0, 0x03A0,   // 0x0010 (16) pixels
    0x0240, 0x0040, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x10A2, 0x0020,   // 0x0020 (32) pixels
    0x01E0, 0x0340, 0x03A0, 0x95C0, 0x03C0, 0x02A0, 0x0060, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0030 (48) pixels
    0x0000, 0x2965, 0xD6BA, 0xCE79, 0x1342, 0x0284, 0x03A0, 0x03C0, 0x03A0, 0x03E0, 0x0380, 0x0140, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0861, 0x39E7, 0xDEFB, 0xDEFB, 0x1322, 0x03A0, 0x03E0, 0x03E0, 0x03E0, 0x03E0, 0x03C0, 0x01A0,   // 0x0050 (80) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x31A6, 0xCE59, 0xD6BA, 0x3BE7, 0x0BA1, 0x03A0, 0x03E0, 0x0300, 0x0300,   // 0x0060 (96) pixels
    0x0300, 0x02C0, 0x0200, 0x00C1, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x18E3, 0x4A89, 0xE75C, 0xD71A, 0x3406, 0x03C0,   // 0x0070 (112) pixels
    0x03C0, 0x03C0, 0x02E0, 0x0120, 0x0100, 0x0020, 0x0060, 0x0060, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x10A2, 0xCE79, 0xAE15,   // 0x0080 (128) pixels
    0x13E2, 0x0BC1, 0x03E0, 0x03E0, 0x03A1, 0x02E0, 0x0260, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0090 (144) pixels
    0x18C3, 0x0841, 0x740D, 0x4CE8, 0x0380, 0x03E0, 0x0220, 0x03C0, 0x03C1, 0x03A1, 0x0141, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00A0 (160) pixels
    0x0000, 0x0000, 0x0000, 0x2945, 0xD69A, 0x634C, 0x0360, 0x03C0, 0x03E0, 0x0300, 0x02A3, 0x02E0, 0x0300, 0x03A1, 0x01A1, 0x0020,   // 0x00B0 (176) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x10A2, 0x5AEB, 0xBE36, 0x33E5, 0x03C0, 0x03E0, 0x03E0, 0x0380, 0x0340, 0x02A0,   // 0x00C0 (192) pixels
    0x0222, 0x0180, 0x0120, 0x0060, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020, 0x738E, 0xEF7D, 0x2424, 0x03C0, 0x0380, 0x03E0,   // 0x00D0 (208) pixels
    0x03E0, 0x03E0, 0x03C0, 0x0320, 0x0264, 0x01A0, 0x00C0, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0841, 0x8C51, 0xAD75, 0x6CED,   // 0x00E0 (224) pixels
    0x03C0, 0x0380, 0x0360, 0x0380, 0x03C0, 0x03C0, 0x0360, 0x0260, 0x09E3, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00F0 (240) pixels
    0x630C, 0xBDF7, 0xCE79, 0x0BC1, 0x0340, 0x02A1, 0x0223, 0x0264, 0x0360, 0x03C0, 0x0280, 0x0962, 0x19A3, 0x0000, 0x0000, 0x0000,   // 0x0100 (256) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0xEF5D, 0x9D53, 0x13C2, 0x0340, 0x0260, 0x1222, 0x1123, 0x0182, 0x0380, 0x03E0, 0x0340, 0x0160,   // 0x0110 (272) pixels
    0x1183, 0x29C5, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000, 0x3C25, 0x1302, 0x0240, 0x01E0, 0x0102, 0x21A4, 0x2985, 0x0181,   // 0x0120 (288) pixels
    0x02A4, 0x03C0, 0x03E0, 0x0360, 0x0200, 0x1242, 0x21A4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0300, 0x00E1, 0x00C1, 0x00C1,   // 0x0130 (304) pixels
    0x00C1, 0x0040, 0x0020, 0x0040, 0x0340, 0x03E0, 0x03E0, 0x03E0, 0x0200, 0x02E0, 0x21A4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0140 (320) pixels
};
static const uint16_t sneedle_med[256] PROGMEM={ //16x16
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4228, 0x5AEB, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0010 (16) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4208, 0xCE59, 0xE71C, 0x5ACB, 0x0841, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0020 (32) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738E, 0xD69A, 0xE71C, 0xE71C, 0xD6BA, 0x94B2, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0030 (48) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738E, 0xC618, 0xAD55, 0x8430, 0x18C3, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0040 (64) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDF7, 0xAD55, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0050 (80) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xC618, 0xD69A, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0060 (96) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDF7, 0xCE59, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0070 (112) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDD7, 0xCE59, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0080 (128) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x18C3, 0xBDF7, 0xCE79, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0090 (144) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4228, 0xBDD7, 0xD69A, 0x2124, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00A0 (160) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x632C, 0xB5B6, 0xDEDB, 0x4228, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00B0 (176) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x8410, 0xAD55, 0xDEDB, 0x630C, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00C0 (192) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x9CF3, 0x9CD3, 0xDEFB, 0x7BCF, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00D0 (208) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB596, 0x8430, 0xDEFB, 0x9492, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00E0 (224) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xC618, 0x5AEB, 0xDEFB, 0xA534, 0x0000, 0x0020, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x00F0 (240) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xB5B6, 0xF79E, 0xD6BA, 0xF79E, 0xEF7D, 0x8C51, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0100 (256) pixels
};

static const uint16_t sneedle_med_fl1[256] PROGMEM={ //16x16
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4228, 0x5AEB, 0x0000, 0x0000, 0x0000, 0x0000, 0x4208, 0x0000, 0x0000,   // 0x0010 (16) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4208, 0xCE59, 0xE71C, 0x5ACB, 0x4208, 0x4208, 0x4208, 0x4208, 0x0000, 0x0000,   // 0x0020 (32) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738E, 0xD69A, 0xE71C, 0xE71C, 0x4208, 0x4208, 0x0000, 0x4208, 0x4208, 0x4208, 0x4208,   // 0x0030 (48) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738E, 0xC618, 0x4208, 0x8430, 0x4208, 0x4208, 0x0000, 0x4208, 0x4208, 0x4208,   // 0x0040 (64) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDF7, 0x4208, 0x0000, 0x4208, 0x4208, 0x4208, 0x4208, 0x0000, 0x4208,   // 0x0050 (80) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4208, 0xD69A, 0x0000, 0x0000, 0x4208, 0x0000, 0x4208, 0x4208, 0x4208,   // 0x0060 (96) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x0000, 0x4208, 0x4208, 0x4208,   // 0x0070 (112) pixels
    0x0000, 0x0000, 0x0000, 0xFB40, 0xFA60, 0x0000, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x0000, 0x0000, 0x4208, 0x4208, 0x4208,   // 0x0080 (128) pixels
    0x0000, 0x0000, 0x0000, 0xFB40, 0xFB40, 0xFA60, 0x18C3, 0xBDF7, 0xCE79, 0x4208, 0x4208, 0xFEC0, 0x4208, 0x4208, 0x0000, 0x4208,   // 0x0090 (144) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0xFEC0, 0xFA60, 0xFA60, 0xBDD7, 0xF800, 0xF800, 0x4208, 0x4208, 0xF800, 0xF800, 0x4208, 0x0000,   // 0x00A0 (160) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0xFA60, 0xFA60, 0xFA60, 0xFA60, 0xDEDB, 0xF800, 0xF800, 0xF800, 0xF800, 0xF800, 0x0000, 0x4208,   // 0x00B0 (176) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFA60, 0xFA60, 0xFA60, 0xFA60, 0xFA60, 0xFA60, 0xF800, 0x0000, 0x0000, 0x4208, 0x4208,   // 0x00C0 (192) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFA60, 0xFEC0, 0xFB40, 0xFA60, 0xFA60, 0xF800, 0x0000, 0x0000, 0x4208, 0x0000,   // 0x00D0 (208) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFA60, 0xFB40, 0xFB40, 0xFA60, 0xFA60, 0xFA60, 0x0000, 0x4208, 0x4208, 0x0000,   // 0x00E0 (224) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFA60, 0xFA60, 0xFB40, 0xFEC0, 0xFB40, 0xFB40, 0xFA60, 0xFA60, 0x0000, 0x0000, 0x0000,   // 0x00F0 (240) pixels
    0x0000, 0x0000, 0x0000, 0xFA60, 0xFA60, 0xFB40, 0xFB40, 0xFEC0, 0xFEC0, 0xFEC0, 0xFEC0, 0xFA60, 0x0000, 0x0000, 0x0000, 0x0000,   // 0x0100 (256) pixels
};
static const uint16_t sneedle_med_fl2[256] PROGMEM={ //16x16
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4228, 0x5AEB, 0x0000, 0x0000, 0x0000, 0x4208, 0x4208, 0x4208, 0x4208,   // 0x0010 (16) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4208, 0xCE59, 0x4208, 0x5ACB, 0x4208, 0x4208, 0x0000, 0x0000, 0x0000, 0x4208,   // 0x0020 (32) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738E, 0xD69A, 0xE71C, 0x4208, 0x4208, 0x4208, 0x0000, 0x0000, 0x0000, 0x0000, 0x4208,   // 0x0030 (48) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738E, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0xFB40, 0x0000, 0x4208, 0x4208,   // 0x0040 (64) pixels
    0x0000, 0x0000, 0x0000, 0xF800, 0x0000, 0x0000, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x0000, 0xFB40, 0x4208, 0x4208, 0x0000,   // 0x0050 (80) pixels
    0x0000, 0x0000, 0x0000, 0xF800, 0xF800, 0x0000, 0x4208, 0x4208, 0x4208, 0x0000, 0xF800, 0xFB40, 0x4208, 0x4208, 0xFEC0, 0x0000,   // 0x0060 (96) pixels
    0x0000, 0x0000, 0x0000, 0xF800, 0x0000, 0x0000, 0x0000, 0xBDF7, 0xCE59, 0x4208, 0xFB40, 0xFB40, 0x4208, 0xFEC0, 0x0000, 0x4208,   // 0x0070 (112) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF800, 0x0000, 0x4208, 0x4208, 0x4208, 0xFB40, 0xF800, 0x4208, 0x4208, 0x4208, 0x4208,   // 0x0080 (128) pixels
    0x0000, 0x0000, 0xFB40, 0x0000, 0x0000, 0x0000, 0x18C3, 0xF800, 0xF800, 0xF800, 0xF800, 0x4208, 0x4208, 0x4208, 0x4208, 0x0000,   // 0x0090 (144) pixels
    0x0000, 0xF800, 0xF800, 0x0000, 0x0000, 0x0000, 0xF800, 0xF800, 0xFB40, 0xFB40, 0xF800, 0x4208, 0x0000, 0x4208, 0x4208, 0x4208,   // 0x00A0 (160) pixels
    0x0000, 0x0000, 0xF800, 0x0000, 0x0000, 0xF800, 0xF800, 0xF800, 0xFB40, 0xF800, 0xF800, 0x0000, 0x4208, 0x4208, 0x4208, 0x4208,   // 0x00B0 (176) pixels
    0x0000, 0x0000, 0xF800, 0xF800, 0xF800, 0xF800, 0xFB40, 0xFB40, 0xFB40, 0xF800, 0xF800, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208,   // 0x00C0 (192) pixels
    0x0000, 0x0000, 0x0000, 0xF800, 0xFB40, 0xFB40, 0xFB40, 0xFEC0, 0xFB40, 0xFB40, 0xF800, 0xF800, 0xF800, 0x4208, 0x4208, 0x4208,   // 0x00D0 (208) pixels
    0x0000, 0x0000, 0x0000, 0xF800, 0xF800, 0xF800, 0xFB40, 0xFEC0, 0xFEC0, 0xFB40, 0xFB40, 0xFB40, 0xF800, 0xF800, 0x4208, 0x0000,   // 0x00E0 (224) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0xF800, 0xF800, 0xFB40, 0xFEC0, 0xFEC0, 0xFEC0, 0xFEC0, 0xFEC0, 0xFB40, 0xF800, 0x0000, 0x0000,   // 0x00F0 (240) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xF800, 0xF800, 0xFB40, 0xFEC0, 0xFEC0, 0xFEC0, 0xFEC0, 0xFB40, 0xF800, 0x0000, 0x0000,   // 0x0100 (256) pixels
};
static const uint16_t sneedle_med_fl3[256] PROGMEM={ //16x16
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4228, 0x5AEB, 0x0000, 0x0000, 0x4208, 0x0000, 0x4208, 0x4208, 0x4208,   // 0x0010 (16) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4208, 0xCE59, 0xE71C, 0x5ACB, 0x0841, 0x4208, 0x4208, 0x4208, 0x0000, 0x0000,   // 0x0020 (32) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738E, 0xD69A, 0xE71C, 0xE71C, 0x4208, 0x94B2, 0x0000, 0x0000, 0x4208, 0x4208, 0x4208,   // 0x0030 (48) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x738E, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x0000,   // 0x0040 (64) pixels
    0x0000, 0x0000, 0xFB40, 0x0000, 0x0000, 0x0000, 0x4208, 0x4208, 0xAD55, 0x4208, 0x4208, 0x4208, 0x4208, 0x4208, 0x0000, 0x0000,   // 0x0050 (80) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x4208, 0xC618, 0xD69A, 0x4208, 0x4208, 0x4208, 0x0000, 0x0000, 0x4208, 0x4208,   // 0x0060 (96) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xBDF7, 0xCE59, 0x4208, 0x0000, 0x4208, 0xFB40, 0x4208, 0x4208, 0x4208,   // 0x0070 (112) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0xFB40, 0x0000, 0xBDD7, 0x4208, 0x4208, 0x4208, 0xFB40, 0xFB40, 0x0000, 0x4208, 0x4208,   // 0x0080 (128) pixels
    0x0000, 0x0000, 0x0000, 0xF800, 0x0000, 0x0000, 0x18C3, 0x4208, 0x4208, 0x4208, 0x0000, 0x0000, 0x4208, 0x4208, 0x4208, 0x4208,   // 0x0090 (144) pixels
    0x0000, 0x0000, 0x0000, 0xF800, 0xF800, 0x0000, 0x4228, 0x4208, 0x4208, 0x2124, 0xF800, 0x4208, 0x0000, 0x4208, 0x4208, 0x0000,   // 0x00A0 (160) pixels
    0x0000, 0x0000, 0x0000, 0xF800, 0xF800, 0xF800, 0x632C, 0xB5B6, 0xDEDB, 0x4208, 0x4208, 0x0000, 0xF800, 0x4208, 0x4208, 0x0000,   // 0x00B0 (176) pixels
    0x0000, 0x0000, 0x0000, 0xF800, 0xFEC0, 0xFEC0, 0xF800, 0xF800, 0xF800, 0x4208, 0xFB40, 0xF800, 0x4208, 0x4208, 0x0000, 0x0000,   // 0x00C0 (192) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0xF800, 0xFB40, 0xFB40, 0xF800, 0xFB40, 0xF800, 0xFEC0, 0xFB40, 0xF800, 0x4208, 0x0000, 0x0000,   // 0x00D0 (208) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0xF800, 0xF800, 0xFB40, 0xFB40, 0xFB40, 0xFB40, 0xFEC0, 0xFB40, 0xF800, 0x4208, 0x0000, 0x0000,   // 0x00E0 (224) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0xF800, 0xFB40, 0xFB40, 0xFEC0, 0xFEC0, 0xFEC0, 0xF800, 0xF800, 0xF800, 0xF800, 0x0000, 0x0000,   // 0x00F0 (240) pixels
    0x0000, 0x0000, 0x0000, 0x0000, 0xF800, 0xFB40, 0xFB40, 0xFEC0, 0xFEC0, 0xFEC0, 0xFEC0, 0xFEC0, 0xFB40, 0xF800, 0x0000, 0x0000,   // 0x0100 (256) pixels
};






// array of bitmaps with their dimensions:
const uint16_t *bitmaps[9][3] = {
    { Portland_Timbers_logo_small, 31, 32 }, // Portland Timbers logo
    { godzilla_seattle_small, 32, 36 }, // Godzilla
    { spaceneedle_small, 6, 8 }, // Space Needle
    { godzilla_small, 7, 8 }, // Godzilla
    { godzilla_med, 20, 16 }, // Godzilla
    { sneedle_med, 16, 16 }, // space needle
    { sneedle_med_fl1, 16, 16 }, // space needle fire1
    { sneedle_med_fl2, 16, 16 }, // space needle fire2
    { sneedle_med_fl3, 16, 16 } // space needle fire3
};


int x    = matrix.width();
int pass = 0;
String txtMsg = "Go Timbers!"; 
int txtMsgLngth = txtMsg.length() * 1;

void setup() {
  matrix.begin();
  matrix.setTextWrap(false);
  matrix.setBrightness(40);
  matrix.setTextColor(colors[0]);
}


// function for vertical scrolling a bitmap using the bitmaps array
void scroll_bitmap(int bitmap_index) {
  int bitmap_height = bitmaps[bitmap_index][1];
  for (int i = -matrix.height(); i <= bitmap_height+matrix.height(); i++) {
    matrix.clear();
    matrix.drawRGBBitmap(0, -i, bitmaps[bitmap_index][0], bitmaps[bitmap_index][1], bitmaps[bitmap_index][2]);
    matrix.show();
    delay(100);
  }
  matrix.clear();
}

// godzilla move to space Needle
void burninate() {
    matrix.clear();
    // matrix.drawRGBBitmap(0, 0, godzilla_small, 7, 8);
    // matrix.drawRGBBitmap(-10, 0, godzilla_med, 20, 16);
    matrix.show();
    // matrix.drawRGBBitmap(24, 0, spaceneedle_small, 6, 8);
    matrix.drawRGBBitmap(21, 0, sneedle_med, 16, 16);
    matrix.show();
    delay(50);
    // move the godzilla_small bit map to the right
    for (int i = -20; i < 6; i++) {
        matrix.clear();
        // matrix.drawRGBBitmap(24, 0, spaceneedle_small, 6, 8);
        matrix.drawRGBBitmap(21, 0, sneedle_med, 16, 16);
        // if i is divisible by 4, move godzilla_small up by 1
        if (i % 4 == 0) {
            // matrix.drawRGBBitmap(i, 0, godzilla_small, 7, 8);
            matrix.drawRGBBitmap(i, -1, godzilla_med, 20, 16);
            matrix.drawRGBBitmap(i, 0, godzilla_med, 20, 16);
            delay(100);
        } else {
            // matrix.drawRGBBitmap(i, -1, godzilla_small, 7, 8);
            matrix.drawRGBBitmap(i, -1, godzilla_med, 20, 16);
            delay(50);
        }
        matrix.show();
    }
    // draw the godzilla_small bit map at the final position next to the space needle
    matrix.clear();
    // matrix.drawRGBBitmap(24, 0, spaceneedle_small, 6, 8);
    // matrix.drawRGBBitmap(16, 0, godzilla_small, 7, 8);
    matrix.drawRGBBitmap(21, 0, sneedle_med, 16, 16);
    matrix.drawRGBBitmap(6, 0, godzilla_med, 20, 16);
    matrix.show();
    delay(1000);
    // flash the screen white
    matrix.fillScreen(0xFFFF);
    matrix.show();
    delay(50);
    matrix.fillScreen(0);
    matrix.show();
    delay(50);
    // fill yellow to simulate explosion
    matrix.fillScreen(0xFFE0);
    matrix.show();
    delay(100);


    //slowly fill the screen with red from the bottom to simulate fire
    for (int i = 0; i < matrix.height(); i++) {
        matrix.clear();
        // matrix.drawRGBBitmap(24, 0, spaceneedle_small, 6, 8);
        // matrix.drawRGBBitmap(16, 0, godzilla_small, 7, 8);
        matrix.drawRGBBitmap(21, 0, sneedle_med, 16, 16);
        matrix.drawRGBBitmap(6, 0, godzilla_med, 20, 16);
        matrix.fillRect(0, matrix.height()-i, 32, i, 0xF800);
        matrix.show();
        delay(50);
    }

    // scroll through godzilla_seattle_small bitmap 
    int bitmap_height = bitmaps[1][1];
    for (int i = -matrix.height(); i <= bitmap_height+matrix.height(); i++) {
        matrix.clear();
        matrix.fillScreen(0xF800);
        matrix.drawRGBBitmap(0, -i, bitmaps[1][0], bitmaps[1][1], bitmaps[1][2]);
        matrix.show();
        delay(100);
    }
    // //slowly fill the screen with red from the bottom to clear
    // for (int i = 0; i < matrix.height(); i++) {
    //     matrix.fillRect(0, matrix.height()-i, 32, i, 0xF800);
    //     matrix.show();
    //     delay(50);
    // }
    // make the screen red and then scroll it to black from the bottom
    matrix.fillScreen(0xF800);
    matrix.show();
    // delay(50);
    for (int i = 0; i < matrix.height(); i++) {
        matrix.clear();
        matrix.fillScreen(0xF800);
        // black rectangle to cover the bottom of the screen
        matrix.fillRect(0, matrix.height()-i, 32, i, 0);
        // matrix.drawRGBBitmap(16, matrix.height()-i, godzilla_small, 7, 8);
        // cycle through the fire bitmaps
        if (i % 3 == 0) {
            matrix.drawRGBBitmap(16, matrix.height()-i, sneedle_med_fl1, 16, 16);
        } else if (i % 3 == 1) {
            matrix.drawRGBBitmap(16, matrix.height()-i, sneedle_med_fl2, 16, 16);
        } else {
            matrix.drawRGBBitmap(16, matrix.height()-i, sneedle_med_fl3, 16, 16);
        }
        matrix.drawRGBBitmap(-4, matrix.height()-i, godzilla_med, 20, 16);
        matrix.show();
        // delay(50);
    }

    // display godzilla_small bitmap and then cycle through the fire bitmaps 4 Timbers
    for (int i=0; i < 8; i++) {
        
        matrix.clear();
        // matrix.drawRGBBitmap(16, 0, godzilla_small, 7, 8);
        // matrix.drawRGBBitmap(24, 0, spaceneedle_fire1, 6, 8);
        matrix.drawRGBBitmap(16, 0, sneedle_med_fl1, 16, 16);
        matrix.drawRGBBitmap(-4, 0, godzilla_med, 20, 16);
        matrix.show();
        delay(100);
        matrix.clear();
        // matrix.drawRGBBitmap(16, 0, godzilla_small, 7, 8);
        // matrix.drawRGBBitmap(24, 0, spaceneedle_fire2, 6, 8);
        matrix.drawRGBBitmap(16, 0, sneedle_med_fl2, 16, 16);
        matrix.drawRGBBitmap(-4, 0, godzilla_med, 20, 16);
        matrix.show();
        delay(100);
        matrix.clear();
        // matrix.drawRGBBitmap(16, 0, godzilla_small, 7, 8);
        // matrix.drawRGBBitmap(24, 0, spaceneedle_fire3, 6, 8);
        matrix.drawRGBBitmap(16, 0, sneedle_med_fl3, 16, 16);
        matrix.drawRGBBitmap(-4, 0, godzilla_med, 20, 16);
        matrix.show();
        delay(100);
    }

    // show "GUT" "THE" "FISH" in the center of the screen, flashing the screen red between each word
    matrix.clear();
    String theWord;
    for (int i = 0; i < 3; i++) {
        
        if (i == 0) {
            theWord = "GUT";
        } else if (i == 1) {
            theWord = "THE";
        } else {
            theWord = "FISH";
        }

        matrix.fillScreen(0xF800);
        // // set the font size to fit the screen height
        matrix.setTextSize(2);
        // set the text color to white
        matrix.setTextColor(0xFFFF);
        // find the center of the screen
        int x = (matrix.width()) / 2;
        
        // find the width of the word (in pixels)
        int txtMsgLngth = theWord.length() * 12;

        // reset the cursor
        matrix.setCursor(x - txtMsgLngth / 2, 8);
       
       // scrtoll the word
        for (int j = 0; j < matrix.width() + txtMsgLngth; j++) {
            matrix.clear();
            matrix.fillScreen(0xF800);
            matrix.setCursor(matrix.width() - j, 0);
            matrix.print(theWord);
            matrix.show();
            delay(0);
        }
        // hold if i <= 1
        // if(i <= 1) {
        //     delay(250);
        //     matrix.clear();
        //     matrix.show();
        //     delay(100);
        // } else {
        //     for (int j = matrix.width(); j < matrix.width() + txtMsgLngth; j++) {
        //         matrix.clear();
        //         matrix.fillScreen(0xF800);
        //         matrix.setCursor(j, 0);
        //         matrix.print(theWord);
        //         matrix.show();
        //         delay(10);
        //     }
        // }
        // finish scrolling

        
    }




}

void loop() {
    burninate(); // Godzilla move to space Needle
//   matrix.fillScreen(0);
//   matrix.setCursor(0, 0);


    x    = matrix.width();
    matrix.clear();
    scroll_bitmap(0); // Portland Timbers logo
    txtMsg = "Go Timbers!"; 
    txtMsgLngth = txtMsg.length() * 1;
    while (x > -txtMsgLngth*12) {
        matrix.clear();
        matrix.fillScreen(0);
        matrix.setCursor(x, 0);
        matrix.setTextColor(0x03E0);
        matrix.print((txtMsg));
        if(--x < (-txtMsgLngth*12)) {
        x = matrix.width();
        if(++pass >= 3) pass = 0;
        // set text to dark green
        matrix.setTextColor(0x03E0);
        }
        matrix.show();
        
        delay(50);
    }
}